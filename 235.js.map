{"version":3,"sources":["webpack:///./pkg/index.js","webpack:///./pkg/index_bg.js"],"names":["cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","Uint8Array","getStringFromWasm0","ptr","len","subarray","heap","Array","fill","undefined","push","heap_next","length","addHeapObject","obj","idx","Error","getObject","takeObject","ret","dropObject","cachegetFloat32Memory0","getFloat32Memory0","Float32Array","WASM_VECTOR_LEN","passArrayF32ToWasm0","arg","malloc","set","_assertNum","n","cachegetInt32Memory0","getInt32Memory0","Int32Array","getArrayF32FromWasm0","main","logError","f","apply","this","arguments","e","error","message","stack","toString","_","console","cachedTextEncoder","TextEncoder","encodeString","encodeInto","view","buf","encode","read","written","State","Object","create","prototype","ps","vs","ptr0","len0","ptr1","len1","__wrap","retptr","r0","r1","v0","slice","__wbindgen_string_new","arg0","arg1","__wbindgen_object_drop_ref","__wbg_error_4bb6c2a97407129a","__wbg_new_59cb74e423758ede","__wbg_stack_558ba5917b466edd","realloc","mem","offset","code","charCodeAt","passStringToWasm0","__wbg_log_61ea781bd002cc41","log","__wbindgen_throw","__wbindgen_rethrow"],"mappings":"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","file":"235.js","sourcesContent":["import * as wasm from \"./index_bg.wasm\";\nexport * from \"./index_bg.js\";\nwasm.__wbindgen_start();\n","import * as wasm from './index_bg.wasm';\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    if (typeof(heap_next) !== 'number') throw new Error('corrupt heap');\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet cachegetFloat32Memory0 = null;\nfunction getFloat32Memory0() {\n    if (cachegetFloat32Memory0 === null || cachegetFloat32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetFloat32Memory0 = new Float32Array(wasm.memory.buffer);\n    }\n    return cachegetFloat32Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArrayF32ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 4);\n    getFloat32Memory0().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction _assertNum(n) {\n    if (typeof(n) !== 'number') throw new Error('expected a number argument');\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nfunction getArrayF32FromWasm0(ptr, len) {\n    return getFloat32Memory0().subarray(ptr / 4, ptr / 4 + len);\n}\n/**\n*/\nexport function main() {\n    wasm.main();\n}\n\nfunction logError(f) {\n    return function () {\n        try {\n            return f.apply(this, arguments);\n\n        } catch (e) {\n            let error = (function () {\n                try {\n                    return e instanceof Error ? `${e.message}\\n\\nStack:\\n${e.stack}` : e.toString();\n                } catch(_) {\n                    return \"<failed to stringify thrown value>\";\n                }\n            }());\n            console.error(\"wasm-bindgen: imported JS function that was not marked as `catch` threw an error:\", error);\n            throw e;\n        }\n    };\n}\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (typeof(arg) !== 'string') throw new Error('expected a string argument');\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n        if (ret.read !== arg.length) throw new Error('failed to pass whole string');\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n/**\n*/\nexport class State {\n\n    constructor() {\n        throw new Error('cannot invoke `new` directly');\n    }\n\n    static __wrap(ptr) {\n        const obj = Object.create(State.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_state_free(ptr);\n    }\n    /**\n    * Initialise state from linear typed arrays of positions and velocities.\n    * @param {Float32Array} ps\n    * @param {Float32Array} vs\n    * @returns {State}\n    */\n    static init(ps, vs) {\n        var ptr0 = passArrayF32ToWasm0(ps, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArrayF32ToWasm0(vs, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.state_init(ptr0, len0, ptr1, len1);\n        return State.__wrap(ret);\n    }\n    /**\n    */\n    update() {\n        if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n        _assertNum(this.ptr);\n        wasm.state_update(this.ptr);\n    }\n    /**\n    * Get a view of current positions as a linear typed array.\n    * @returns {Float32Array}\n    */\n    positions() {\n        try {\n            if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n            const retptr = wasm.__wbindgen_export_1.value - 16;\n            wasm.__wbindgen_export_1.value = retptr;\n            _assertNum(this.ptr);\n            wasm.state_positions(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayF32FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        } finally {\n            wasm.__wbindgen_export_1.value += 16;\n        }\n    }\n    /**\n    * Get a view of current velocities as a linear typed array.\n    * @returns {Float32Array}\n    */\n    velocities() {\n        try {\n            if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n            const retptr = wasm.__wbindgen_export_1.value - 16;\n            wasm.__wbindgen_export_1.value = retptr;\n            _assertNum(this.ptr);\n            wasm.state_velocities(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayF32FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        } finally {\n            wasm.__wbindgen_export_1.value += 16;\n        }\n    }\n}\n\nexport const __wbindgen_string_new = function(arg0, arg1) {\n    var ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nexport const __wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nexport const __wbg_error_4bb6c2a97407129a = logError(function(arg0, arg1) {\n    try {\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(arg0, arg1);\n    }\n});\n\nexport const __wbg_new_59cb74e423758ede = logError(function() {\n    var ret = new Error();\n    return addHeapObject(ret);\n});\n\nexport const __wbg_stack_558ba5917b466edd = logError(function(arg0, arg1) {\n    var ret = getObject(arg1).stack;\n    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n});\n\nexport const __wbg_log_61ea781bd002cc41 = logError(function(arg0) {\n    console.log(getObject(arg0));\n});\n\nexport const __wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nexport const __wbindgen_rethrow = function(arg0) {\n    throw takeObject(arg0);\n};\n\n"],"sourceRoot":""}